plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.serialization"
    id 'com.matthewprenger.cursegradle'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def total_version = "$mod_version-$minecraft_version"

archivesBaseName = project.archives_base_name
version = total_version
group = project.maven_group

sourceSets{
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}


repositories {
    maven {url = "https://repo.spongepowered.org/maven"}
    mavenCentral()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:$fabric_kotlin_version"

    modImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_runtime_version"

    testImplementation('com.google.guava:guava:30.0-jre') {
        force = true
    }
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation 'org.spongepowered:lwts:1.0.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'


    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


//// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//// if it is present.
//// If you remove this task, sources will not be generated.
//task sourcesJar(type: Jar, dependsOn: classes) {
//    archiveClassifier = "sources"
//    from sourceSets.main.allSource
//}
//



//curseforge {
//    apiKey = project.hasProperty("curseforge_api_key") ? project.curseforge_api_key : ""
//    project {
//        id = '334410'
//        releaseType = 'release'
//        addGameVersion "Fabric"
//        addGameVersion curseforge_mc_version
//        changelogType = "markdown"
//        changelog = file("changelog.md")
//
//        mainArtifact(remapJar) {
//            displayName = "Fabric Drawer $total_version"
//        }
//        addArtifact sourcesJar
//
//        afterEvaluate {
//            mainArtifact(remapJar)
//            uploadTask.dependsOn(remapJar)
//        }
//    }
//
//    options {
//        forgeGradleIntegration = false
//    }
//}




//bintray {
//    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
//    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
//    publications = ["DrawerPublication"]
//    publish = true //[Default: false] Whether version should be auto published after an upload
//    pkg {
//        repo = "libs"
//        name = "fabric-drawer"
//        desc = 'Fabric library mod for kotlin mods that allows you to easily save data to NBT and PacketByteBuf using kotlinx.serialization.'
//        websiteUrl = project.github_url
//        issueTrackerUrl = "${project.github_url}/issues"
//        githubRepo = 'natanfudge/fabric-drawer' //Optional Github repository
//        githubReleaseNotesFile = 'README.md' //Optional Github readme file
//        licenses = [project.license]
//        vcsUrl = project.github_url
//        version {
//            name = total_version
//            released = new Date()
//        }
//    }
//
//}





test {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile){
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}


Properties properties = new Properties()
File propertiesFile = new File('gradle.properties')
propertiesFile.withInputStream {
    properties.load(it)
}
properties.put("total_version",total_version)


task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out variables like \$total_version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand(properties)
    }
    destinationDir = rootDir
}

apply from: "${rootDir}/scripts/publish-root.gradle"

ext {
    PUBLISH_VERSION = total_version
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

afterEvaluate {
    publishReleasePublicationToSonatypeRepository.dependsOn updateTemplate
}
//bintrayUpload.dependsOn "curseforge334410"

